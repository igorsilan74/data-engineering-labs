USE DATABASE ISILANTIEV_DB;

USE SCHEMA PUBLIC;

CREATE OR REPLACE STORAGE INTEGRATION isilantiev_s3_int
  TYPE = EXTERNAL_STAGE
  STORAGE_PROVIDER = 'S3'
  ENABLED = TRUE
  STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::554739427960:role/snowflake-readonly-isilantiev'
  STORAGE_ALLOWED_LOCATIONS = ('*');

  DESC INTEGRATION isilantiev_s3_int;

  CREATE OR REPLACE FILE FORMAT isilantiev_csv_format
  TYPE = 'CSV'
  COMPRESSION = 'AUTO'
  FIELD_DELIMITER = ','
  RECORD_DELIMITER = '\n'
  SKIP_HEADER = 1
  TRIM_SPACE = TRUE,
  FIELD_OPTIONALLY_ENCLOSED_BY = '"'
  ERROR_ON_COLUMN_COUNT_MISMATCH = TRUE;

  CREATE OR REPLACE FILE FORMAT isilantiev_parquet_format
  TYPE = 'PARQUET'
  COMPRESSION = 'AUTO'
  USE_LOGICAL_TYPE = TRUE
  TRIM_SPACE = TRUE;

  CREATE OR REPLACE STAGE isilantiev_parquet_s3_stage
  STORAGE_INTEGRATION = isilantiev_s3_int
  URL = 's3://robot-dreams-source-data/'
  FILE_FORMAT = isilantiev_parquet_format;

LIST @isilantiev_parquet_s3_stage;

-- load raw data
CREATE OR REPLACE TABLE TAXI_ZONE_LOOKUP (
  LOCATIONID VARCHAR,
  BOROUGH VARCHAR,
  ZONE VARCHAR,
  SERVICE_ZONE VARCHAR
);  
      
COPY INTO TAXI_ZONE_LOOKUP
FROM @isilantiev_parquet_s3_stage/Lecture_3/nyc_taxi/taxi_zone_lookup.csv
FILE_FORMAT = (FORMAT_NAME = isilantiev_csv_format);
;

select TOP 10 *
from TAXI_ZONE_LOOKUP;

CREATE OR REPLACE TABLE YELLOW_RAW (
  VENDORID BIGINT,
  TPEP_PICKUP_DATETIME TIMESTAMP_NTZ,
  TPEP_DROPOFF_DATETIME TIMESTAMP_NTZ,
  PASSENGER_COUNT BIGINT,
  TRIP_DISTANCE DOUBLE,
  RATECODEID BIGINT,
  STORE_AND_FWD_FLAG VARCHAR,
  PULOCATIONID BIGINT,
  DOLOCATIONID BIGINT,
  PAYMENT_TYPE BIGINT,
  FARE_AMOUNT DOUBLE,
  EXTRA DOUBLE,
  MTA_TAX DOUBLE,
  TIP_AMOUNT DOUBLE,
  TOLLS_AMOUNT DOUBLE,
  IMPROVEMENT_SURCHARGE DOUBLE,
  TOTAL_AMOUNT DOUBLE,
  CONGESTION_SURCHARGE DOUBLE,
  AIRPORT_FEE DOUBLE
);  

COPY INTO YELLOW_RAW
FROM @isilantiev_parquet_s3_stage/Lecture_3/nyc_taxi/yellow/
MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE
;

CREATE OR REPLACE TABLE GREEN_RAW (
  VENDORID BIGINT,
  LPEP_PICKUP_DATETIME TIMESTAMP_NTZ,
  LPEP_DROPOFF_DATETIME TIMESTAMP_NTZ,
  PASSENGER_COUNT BIGINT,
  TRIP_DISTANCE DOUBLE,
  RATECODEID BIGINT,
  STORE_AND_FWD_FLAG VARCHAR,
  PULOCATIONID BIGINT,
  DOLOCATIONID BIGINT,
  PAYMENT_TYPE BIGINT,
  FARE_AMOUNT DOUBLE,
  EXTRA DOUBLE,
  MTA_TAX DOUBLE,
  TIP_AMOUNT DOUBLE,
  TOLLS_AMOUNT DOUBLE,
  IMPROVEMENT_SURCHARGE DOUBLE,
  TOTAL_AMOUNT DOUBLE,
  CONGESTION_SURCHARGE DOUBLE,
  AIRPORT_FEE DOUBLE,
  EHAIL_FEE DOUBLE,
  TRIP_TYPE BIGINT
);  

COPY INTO GREEN_RAW
FROM @isilantiev_parquet_s3_stage/Lecture_3/nyc_taxi/green/
MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE
ON_ERROR = 'SKIP_FILE'
;

-- enrich raw data
--yellow
CREATE TABLE YELLOW_ENRICHED LIKE YELLOW_RAW;

ALTER TABLE YELLOW_ENRICHED
ADD COLUMN PICKUP_ZONE VARCHAR;

ALTER TABLE YELLOW_ENRICHED
ADD COLUMN DROPOFF_ZONE VARCHAR;

ALTER TABLE YELLOW_ENRICHED
ADD COLUMN PICKUP_HOUR NUMERIC;

ALTER TABLE YELLOW_ENRICHED
ADD COLUMN TRIP_CATEGORY VARCHAR;

--green
CREATE TABLE GREEN_ENRICHED LIKE GREEN_RAW;

ALTER TABLE GREEN_ENRICHED
ADD COLUMN PICKUP_ZONE VARCHAR;

ALTER TABLE GREEN_ENRICHED
ADD COLUMN DROPOFF_ZONE VARCHAR;

ALTER TABLE GREEN_ENRICHED
ADD COLUMN PICKUP_HOUR NUMERIC;

ALTER TABLE GREEN_ENRICHED
ADD COLUMN TRIP_CATEGORY VARCHAR;

-- insert
INSERT INTO YELLOW_ENRICHED
SELECT y.*,
pz.ZONE as PICKUP_ZONE,
dz.ZONE as DROPOFF_ZONE,
HOUR(y.tpep_pickup_datetime) AS PICKUP_HOUR,
CASE 
  WHEN TRIP_DISTANCE < 2 THEN 'Short' 
  WHEN TRIP_DISTANCE BETWEEN 2 AND 10 THEN 'Medium' 
  ELSE 'Long' 
END as TRIP_CATEGORY
FROM YELLOW_RAW as y
LEFT JOIN TAXI_ZONE_LOOKUP as pz ON y.PULOCATIONID = pz.LOCATIONID
LEFT JOIN TAXI_ZONE_LOOKUP as dz ON y.DOLOCATIONID = dz.LOCATIONID;

INSERT INTO GREEN_ENRICHED
SELECT g.*,
pz.ZONE as PICKUP_ZONE,
dz.ZONE as DROPOFF_ZONE,
HOUR(g.lpep_pickup_datetime) AS PICKUP_HOUR,
CASE 
  WHEN TRIP_DISTANCE < 2 THEN 'Short' 
  WHEN TRIP_DISTANCE BETWEEN 2 AND 10 THEN 'Medium' 
  ELSE 'Long' 
END as TRIP_CATEGORY
FROM GREEN_RAW as g
LEFT JOIN TAXI_ZONE_LOOKUP as pz ON g.PULOCATIONID = pz.LOCATIONID
LEFT JOIN TAXI_ZONE_LOOKUP as dz ON g.DOLOCATIONID = dz.LOCATIONID;

--filtering
DELETE FROM YELLOW_ENRICHED
WHERE (TRIP_DISTANCE <=0 OR TOTAL_AMOUNT <=0 OR PASSENGER_COUNT <=0 OR PASSENGER_COUNT > 6);

DELETE FROM GREEN_ENRICHED
WHERE (TRIP_DISTANCE <=0 OR TOTAL_AMOUNT <=0 OR PASSENGER_COUNT <=0 OR PASSENGER_COUNT > 6);


CREATE OR REPLACE TABLE TRIP_ZONES (
  PICKUP_ZONE VARCHAR,
  TOTAL_TRIPS NUMBER,
  AVG_TRIP_DISTANCE DOUBLE,
  AVG_TOTAL_AMOUNT DOUBLE,
  AVG_TIP_AMOUNT DOUBLE,
  MAX_TRIP_DISTANCE DOUBLE,
  MIN_TIP_AMOUNT DOUBLE
);  

INSERT INTO TRIP_ZONES
SELECT 
    PICKUP_ZONE, COUNT(*) AS TOTAL_TRIPS,
    AVG(TRIP_DISTANCE) as AVG_TRIP_DISTANCE,
    AVG(TOTAL_AMOUNT) as AVG_TOTAL_AMOUNT,
    AVG(TIP_AMOUNT) as AVG_TIP_AMOUNT,
    AVG(TRIP_DISTANCE) as MAX_TRIP_DISTANCE,
    MIN(TIP_AMOUNT) as MIN_TIP_AMOUNT
FROM (
  SELECT PICKUP_ZONE, TRIP_DISTANCE, TOTAL_AMOUNT, TIP_AMOUNT
  FROM YELLOW_ENRICHED
  UNION ALL
  SELECT PICKUP_ZONE, TRIP_DISTANCE, TOTAL_AMOUNT, TIP_AMOUNT
  FROM GREEN_ENRICHED  
)
GROUP BY PICKUP_ZONE;

--time travel
DELETE FROM GREEN_ENRICHED
WHERE LPEP_PICKUP_DATETIME = '2024-05-01 00:07:08.000';

SELECT * FROM GREEN_ENRICHED
WHERE LPEP_PICKUP_DATETIME = '2024-05-01 00:07:08.000';

SELECT * FROM GREEN_ENRICHED AT(OFFSET => -60*20)
WHERE LPEP_PICKUP_DATETIME = '2024-05-01 00:07:08.000';

INSERT INTO GREEN_ENRICHED
SELECT * FROM GREEN_ENRICHED AT(OFFSET => -60*20)
WHERE LPEP_PICKUP_DATETIME = '2024-05-01 00:07:08.000';

SELECT * FROM GREEN_ENRICHED
WHERE LPEP_PICKUP_DATETIME = '2024-05-01 00:07:08.000';

-- stream
CREATE STREAM yellow_stream ON TABLE YELLOW_ENRICHED;

INSERT INTO YELLOW_ENRICHED
SELECT TOP 2 y.*,
'TEST_ZONE' as PICKUP_ZONE,
'TEST_ZONE' as DROPOFF_ZONE,
0 AS PICKUP_HOUR,
'Test 'as TRIP_CATEGORY
FROM YELLOW_RAW as y
WHERE TPEP_PICKUP_DATETIME IN ('2024-08-01 00:21:00.000', '2024-08-01 00:20:01.000');

select * from yellow_stream;

CREATE TABLE YELLOW_CHANGES_LOG LIKE YELLOW_ENRICHED;

--task
CREATE OR REPLACE TASK monitoring_task
  SCHEDULE = '1 HOUR'
  WHEN SYSTEM$STREAM_HAS_DATA('yellow_stream')
  AS
  INSERT INTO YELLOW_CHANGES_LOG
    SELECT * EXCLUDE(METADATA$ACTION, METADATA$ISUPDATE, METADATA$ROW_ID)
     FROM yellow_stream;

EXECUTE TASK monitoring_task;

--zone stats task
CREATE OR REPLACE TABLE ZONE_HOURLY_STATS(
  PICKUP_HOUR NUMBER,
  AVG_TRIP_DISTANCE DOUBLE,
  AVG_TOTAL_AMOUNT DOUBLE,
  TOTAL_TRIPS NUMBER
);

INSERT INTO ZONE_HOURLY_STATS
SELECT
    r.hour AS PICKUP_HOUR,
    0 AS AVG_TRIP_DISTANCE,
    0 AS AVG_TOTAL_AMOUNT,
    0 AS TOTAL_TRIPS
FROM
    (select hour from (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) - 1 AS hour FROM information_schema.tables) order by hour LIMIT 24) AS r;

CREATE OR REPLACE TASK is_zone_stats_task
  SCHEDULE = '1 HOUR'
  AS
    UPDATE ZONE_HOURLY_STATS st
      SET 
        AVG_TRIP_DISTANCE = yellow_data.AVG_TRIP_DISTANCE,
        AVG_TOTAL_AMOUNT = yellow_data.TOTAL_TRIPS,
        TOTAL_TRIPS = yellow_data.TOTAL_TRIPS
    FROM (
      SELECT 
        PICKUP_HOUR, 
        AVG(TRIP_DISTANCE) as AVG_TRIP_DISTANCE,
        AVG(TOTAL_AMOUNT) as AVG_TOTAL_AMOUNT,
        COUNT(*) AS TOTAL_TRIPS
      FROM YELLOW_ENRICHED
      GROUP BY PICKUP_HOUR
    ) yellow_data
    WHERE st.PICKUP_HOUR = yellow_data.PICKUP_HOUR; 

EXECUTE TASK is_zone_stats_task;

--additional
CREATE OR REPLACE TABLE all_trips
as
SELECT * FROM yellow_enriched;

ALTER TABLE all_trips
ADD COLUMN EHAIL_FEE DOUBLE;

ALTER TABLE all_trips
ADD COLUMN TRIP_TYPE BIGINT;

CREATE OR REPLACE TABLE green_enriched_join as
SELECT * FROM green_enriched;

ALTER TABLE green_enriched_join
RENAME COLUMN LPEP_PICKUP_DATETIME TO TPEP_PICKUP_DATETIME;

ALTER TABLE green_enriched_join
RENAME COLUMN LPEP_DROPOFF_DATETIME TO TPEP_DROPOFF_DATETIME;

INSERT INTO all_trips
SELECT 
  VENDORID, TPEP_PICKUP_DATETIME, TPEP_DROPOFF_DATETIME,
  PASSENGER_COUNT, TRIP_DISTANCE, RATECODEID, STORE_AND_FWD_FLAG,
  PULOCATIONID, DOLOCATIONID, PAYMENT_TYPE, FARE_AMOUNT, EXTRA,
  MTA_TAX, TIP_AMOUNT, TOLLS_AMOUNT, IMPROVEMENT_SURCHARGE, TOTAL_AMOUNT,
  CONGESTION_SURCHARGE, AIRPORT_FEE, PICKUP_ZONE, DROPOFF_ZONE, PICKUP_HOUR, TRIP_CATEGORY, EHAIL_FEE, TRIP_TYPE
FROM green_enriched_join;

CREATE OR REPLACE TABLE IS_YELLOW_TRIP_DUBLICATES_LOG LIKE YELLOW_RAW;

CREATE OR REPLACE PROCEDURE is_insert_yellow_proc(
  VENDORID BIGINT,
  TPEP_PICKUP_DATETIME TIMESTAMP_NTZ,
  TPEP_DROPOFF_DATETIME TIMESTAMP_NTZ,
  PASSENGER_COUNT BIGINT,
  TRIP_DISTANCE DOUBLE,
  RATECODEID BIGINT,
  STORE_AND_FWD_FLAG VARCHAR,
  PULOCATIONID BIGINT,
  DOLOCATIONID BIGINT,
  PAYMENT_TYPE BIGINT,
  FARE_AMOUNT DOUBLE,
  EXTRA DOUBLE,
  MTA_TAX DOUBLE,
  TIP_AMOUNT DOUBLE,
  TOLLS_AMOUNT DOUBLE,
  IMPROVEMENT_SURCHARGE DOUBLE,
  TOTAL_AMOUNT DOUBLE,
  CONGESTION_SURCHARGE DOUBLE,
  AIRPORT_FEE DOUBLE
)
RETURNS VARCHAR
LANGUAGE SQL
AS
$$
BEGIN
    INSERT INTO YELLOW_RAW 
    SELECT 
      :VENDORID, :TPEP_PICKUP_DATETIME, :TPEP_DROPOFF_DATETIME,
      :PASSENGER_COUNT, :TRIP_DISTANCE, :RATECODEID, :STORE_AND_FWD_FLAG, :PULOCATIONID,
      :DOLOCATIONID, :PAYMENT_TYPE, :FARE_AMOUNT, :EXTRA, :MTA_TAX, :TIP_AMOUNT, :TOLLS_AMOUNT, :IMPROVEMENT_SURCHARGE,
      :TOTAL_AMOUNT, :CONGESTION_SURCHARGE, :AIRPORT_FEE
    WHERE NOT EXISTS (
        SELECT 1
        FROM YELLOW_RAW
        WHERE TPEP_PICKUP_DATETIME = :TPEP_PICKUP_DATETIME
        AND TPEP_DROPOFF_DATETIME = :TPEP_DROPOFF_DATETIME
        AND PULOCATIONID = :PULOCATIONID
        AND DOLOCATIONID = :DOLOCATIONID
    );

    IF (SQLROWCOUNT > 0) THEN
        RETURN 'Row inserted successfully.';
    ELSE
        INSERT INTO IS_YELLOW_TRIP_DUBLICATES_LOG VALUES (
          :VENDORID, :TPEP_PICKUP_DATETIME, :TPEP_DROPOFF_DATETIME,
          :PASSENGER_COUNT, :TRIP_DISTANCE, :RATECODEID, :STORE_AND_FWD_FLAG,
          :PULOCATIONID, :DOLOCATIONID, :PAYMENT_TYPE, :FARE_AMOUNT, :EXTRA,
          :MTA_TAX, :TIP_AMOUNT, :TOLLS_AMOUNT, :IMPROVEMENT_SURCHARGE, :TOTAL_AMOUNT,
          :CONGESTION_SURCHARGE, :AIRPORT_FEE);
        
        RETURN 'Duplicate record found. No row inserted.';
    END IF;
END;
$$;

CALL is_insert_yellow_proc(
  1, '2024-08-01 00:21:00.000', '2024-08-01 00:36:13.000',
  1, 7.4, 1, 'N', 138, 80,
  1, 28.9, 7.75, 0.5,
  7.65, 0, 1, 45.8, 0, 1.75);

CALL is_insert_yellow_proc(
  1, '2024-08-01 00:21:00.002', '2024-08-01 00:36:13.000',
  1, 7.4, 1, 'N', 138, 80,
  1, 28.9, 7.75, 0.5,
  7.65, 0, 1, 45.8, 0, 1.75);

select top 10 * from IS_YELLOW_TRIP_DUBLICATES_LOG;

--Zero-Copy Cloning DB taxi_dev
CREATE DATABASE ISILANTIEV_TAXI_DEV CLONE ISILANTIEV_DB;

